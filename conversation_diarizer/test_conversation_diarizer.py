import pytest
import numpy as np
import librosa
import matplotlib.pyplot as plt
from conversation_diarizer import NoiseReducer
import soundfile as sf


def generate_noisy_signal(freq=440.0, duration=2.0, sr=22050, noise_factor=0.5):
    """
    Generate a noisy sine wave signal.

    :param freq:         Frequency of the sine wave.
    :param duration:     Duration of the signal in seconds.
    :param sr:           Sampling rate.
    :param noise_factor: Factor by which to multiply the noise added to the signal. Higher values mean more noise.

    :returns: Noisy signal.
    """
    t = np.linspace(0, duration, int(sr * duration), endpoint=False)
    clean_signal = np.sin(2 * np.pi * freq * t)
    noise = np.random.normal(0, 1, clean_signal.shape)
    noisy_signal = clean_signal + noise_factor * noise
    return noisy_signal


@pytest.fixture
def noisy_audio_file(tmpdir):
    """Generate a noisy audio file and return its path."""
    noisy_signal = generate_noisy_signal()
    path = tmpdir.join("temp_noisy.wav")
    sf.write(str(path), noisy_signal, samplerate=22050)
    return path


@pytest.mark.parametrize("verbose", [True, False])
def test_noise_reducer(noisy_audio_file, verbose):
    """
    Test the NoiseReducer class.

    :param noisy_audio_file: Path to the noisy audio file generated by the pytest fixture.

    :param verbose:          If True, plots will be generated during the test. This parameter is iterated over two values: True and False, effectively running the test twice.
    """
    reducer = NoiseReducer(verbose=verbose)
    denoised_signal = reducer.reduce_noise(noisy_audio_file)

    noisy_signal, _ = librosa.load(noisy_audio_file, sr=None)
    assert not np.array_equal(
        noisy_signal, denoised_signal
    ), "Denoised signal is identical to the noisy signal."
